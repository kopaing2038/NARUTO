from pyrogram import Client, filters
import requests
from info import LOG_CHANNEL, GOOGLE_API_KEY, SUPPORT_CHAT_ID
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
#import google.generativeai as genai

genai.configure(api_key=GOOGLE_API_KEY)

@Client.on_message(filters.command('ask') & filters.chat(SUPPORT_CHAT_ID)) # support work only added 
async def ai_generate(client, message):
   user_input = message.text.split()[1:]

   if not user_input:
       await message.reply_text("command incomplete provide /ask hello")
       return

   user_input = " ".join(user_input)

   generation_config = {
       "temperature": 0.9,
       "top_p": 1,
       "top_k": 1,
       "max_output_tokens": 2048,
   }

   safety_settings = [
       {
           "category": "HARM_CATEGORY_HARASSMENT",
           "threshold": "BLOCK_MEDIUM_AND_ABOVE"
       },
       {
           "category": "HARM_CATEGORY_HATE_SPEECH",
           "threshold": "BLOCK_MEDIUM_AND_ABOVE"
       },
       {
           "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
           "threshold": "BLOCK_MEDIUM_AND_ABOVE"
       },
       {
           "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
           "threshold": "BLOCK_MEDIUM_AND_ABOVE"
       },
   ]

   model = genai.GenerativeModel(
       model_name="gemini-pro",
       generation_config=generation_config,
       safety_settings=safety_settings
   )

   prompt_parts = [user_input]
   response = model.generate_content(prompt_parts)
   await message.reply_text(text=f" ú·¥á è {message.from_user.mention}\n «´·¥ú·¥á Ä è …™s:- {user_input}\n\nResults:\n\n{response.text}")         
   await client.send_message(LOG_CHANNEL, text=f"#ask  Ä·¥á«´·¥ú·¥ás·¥õ “ì Ä·¥è·¥ç {message.from_user.mention}\n«´·¥ú·¥á Ä è …™s:- {user_input}")
   await s.delete()

@Client.on_message(filters.command("ask"))
async def ai_generate_private(client, message):
  buttons = [[
    InlineKeyboardButton("S·ëå·ë≠·ë≠O·ñáT G·ñáO·ëå·ë≠ ", url="https://t.me/XBOTSUPPORTS")
  ]]
  reply_markup = InlineKeyboardMarkup(buttons)
  await message.reply_text(text=f" ú·¥á è {message.from_user.mention}\n·¥ús·¥á ·¥õ ú…™s “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™n S·ëå·ë≠·ë≠O·ñáT G·ñáO·ëå·ë≠  üëá ", reply_markup=reply_markup)
